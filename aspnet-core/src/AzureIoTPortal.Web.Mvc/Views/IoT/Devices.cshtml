@using AzureIoTPortal.Web.Startup
@{
    ViewBag.CurrentPageName = PageNames.Home; // The menu item will be active for this page.
}
@section styles {
    <link href="~/lib/morris.js/morris.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/lib/igniteui/css/themes/infragistics/infragistics.theme.css" rel="stylesheet" />
    <link href="~/lib/igniteui/css/structure/infragistics.css" rel="stylesheet" />
    <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/prettify/r224/prettify.min.css">
    <link href="~/lib/morris.js/morris.css" rel="stylesheet" />
    <link href="~/lib/dist/switch.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.0/css/ion.rangeSlider.min.css" />

    <style type="text/css">



        .modal.left .modal-dialog,
        .modal.right .modal-dialog {
            position: fixed;
            margin: auto;
            width: 560px;
            height: 100%;
            -webkit-transform: translate3d(0%, 0, 0);
            -ms-transform: translate3d(0%, 0, 0);
            -o-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
        }

        .modal.left .modal-content,
        .modal.right .modal-content {
            height: 100%;
            overflow-y: auto;
        }

        .modal.left .modal-body,
        .modal.right .modal-body {
            padding: 15px 15px 80px;
        }

        /*Left*/
        .modal.left.fade .modal-dialog {
            left: -560px;
            -webkit-transition: opacity 0.3s linear, left 0.3s ease-out;
            -moz-transition: opacity 0.3s linear, left 0.3s ease-out;
            -o-transition: opacity 0.3s linear, left 0.3s ease-out;
            transition: opacity 0.3s linear, left 0.3s ease-out;
        }

        .modal.left.fade.in .modal-dialog {
            left: 0;
        }

        /*Right*/
        .modal.right.fade .modal-dialog {
            right: -560px;
            -webkit-transition: opacity 0.3s linear, right 0.3s ease-out;
            -moz-transition: opacity 0.3s linear, right 0.3s ease-out;
            -o-transition: opacity 0.3s linear, right 0.3s ease-out;
            transition: opacity 0.3s linear, right 0.3s ease-out;
        }

        .modal.right.fade.in .modal-dialog {
            right: 0;
        }

        /* ----- MODAL STYLE ----- */
        .modal-content {
            border-radius: 0;
            border: none;
        }

        .modal-header {
            border-bottom-color: #EEEEEE;
            background-color: #FAFAFA;
        }
    </style>

}
@section scripts
{

    <script src="http://code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

    <!-- Ignite UI Required Combined JavaScript Files -->
    <script src="~/lib/igniteui/js/infragistics.core.js"></script>
    <script src="~/lib/igniteui/js/infragistics.lob.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.2/raphael-min.js"></script>

    <script src="~/lib/morris.js/morris.js"></script>
    <script src="~/lib/dist/switch.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/r224/prettify.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.0/js/ion.rangeSlider.min.js"></script>

    <script type="text/javascript">
         var deviceInfo = "";
        var culDevice = "";
        var tempDevice = "";
        var airConditionOn='',lightOn='';
        var temp_range='';
        var culDeviceOn = false;
         
        $(function () {
             deviceInfo = @(Html.Raw(ViewBag.Devices));
           
          
            
             $("#gridDevices").igGrid({

                width: "100%",
                 autoCommit: true,
                 dataSource: deviceInfo.Devices,
                dataSourceType: "json",
                responseDataKey: "results",

                autofitLastColumn: false,
                autoGenerateColumns: false,
                 primaryKey: "iot_id",

                columns: [
                    { key: "Id", headerText: "ID", dataType: "number", width: "0%", hidden: true },
                    { key: "iot_id", headerText: "Device", dataType: "string" },
                    { key: "connection_state", headerText: "Connection", dataType: "string"  },
                    { key: "last_conection_state_update_time", headerText: "Last Connection Update Time", dataType: "date", format: "dd/MM/yyyy HH:mm:ss" },
                    { key: "last_activity_time", headerText: "Last Activity Time", dataType: "date", format: "dd/MM/yyyy HH:mm:ss"} ,
                    { key: "state", headerText: "State", dataType: "string"},
                    { key: "CreationTime",  headerText: "Add Time", dataType: "date", format: "dd/MM/yyyy HH:mm:ss" }

                 ],

                features: [
                    {
                        name: 'Paging',
                        type: "local",
                        pageSize: 20
                    }
                ],

                autoGenerateLayouts: false,

                 cellClick: function (evt, ui) {
                     culDevice = ui.rowKey;
                     initDevice(ui.rowKey);
                     $("#ModalRight").modal('show');
                     setTimeout('reLoadChart()',500);
                 }
             });

            //var ref = setInterval(function(){
            //    getEvents();
            //}, 10 * 1000);


           
        })

        function initDevice(device) {


            culDevice = device;
            var boardTitle = device;
            $("#ModalTitle").html(boardTitle);

            $("#BoardTitle").html('Device "' + device + '"');
            for (var i = 0; i < deviceInfo.Devices.length; i++) {
                if (deviceInfo.DeviceState[i].DeviceName == device) {
                    var deviceState = deviceInfo.DeviceState[i];

                    var boardInfo = '';

                    if (deviceState.Connection.length > 0) {
                         boardInfo +=   '<div class="col-sm-6 col-md-4">'+
                            '<div class="thumbnail" style="text-align:center">'+
                                '<i class="material-icons">devices</i>'+
                                '<div class="caption">'+
                                    '<h3>'+deviceState.Connection+'</h3>'+
                                    '<div class="font-16">'+
                                        'Status'+
                                    '</div>'+
                                    '<div class="font-10 col-grey">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }

                    if (deviceState.Temperature.length > 0) {
                         boardInfo +=   '<div class="col-sm-6 col-md-4">'+
                            '<div class="thumbnail" style="text-align:center">'+
                                '<i class="material-icons">devices</i>'+
                                '<div class="caption">'+
                                    '<h3>'+deviceState.Temperature+'</h3>'+
                                    '<div class="font-16">'+
                                        'Temperature'+
                                    '</div>'+
                                    '<div class="font-10 col-grey">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }

                    if (deviceState.Humidity.length > 0) {
                         boardInfo +=   '<div class="col-sm-6 col-md-4">'+
                            '<div class="thumbnail" style="text-align:center">'+
                                '<i class="material-icons">devices</i>'+
                                '<div class="caption">'+
                                    '<h3>'+deviceState.Humidity+'</h3>'+
                                    '<div class="font-16">'+
                                        'Humidity'+
                                    '</div>'+
                                    '<div class="font-10 col-grey">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }
                    if (deviceState.DeviceOn.length > 0) {
                         boardInfo +=   '<div class="col-sm-6 col-md-4">'+
                            '<div class="thumbnail" style="text-align:center">'+
                                '<i class="material-icons">devices</i>'+
                                '<div class="caption">'+
                                    '<h3>'+deviceState.DeviceOn+'</h3>'+
                                    '<div class="font-16">'+
                                        'Device'+
                                    '</div>'+
                                    '<div class="font-10 col-grey">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }
                    if (deviceState.Value.length > 0) {
                         boardInfo +=   '<div class="col-sm-6 col-md-4">'+
                            '<div class="thumbnail" style="text-align:center">'+
                                '<i class="material-icons">devices</i>'+
                             '<div class="caption">' +
                                '<h3>' + deviceState.Value + '</h3>' +
                                    '<div class="font-16">'+
                                        'Useage'+
                                    '</div>'+
                                    '<div class="font-10 col-grey">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }
                    

                    $("#board").html(boardInfo);
                    $('#BoardChart').html('');
                    $('#DeviceOnCheckBox').html('');
                    $("#DeviceSettingPage").css('display', 'block');
                    if (deviceState.DeviceType == "AirCondition") {
                        $("#AirConditionSettings").css('display', 'block');
                         $("#LightSettings").css('display', 'none');

                        if (airConditionOn.length < 1) {
                            var checked = false;
                            if (deviceState.DeviceOn == 'on')
                                checked = true;

                            var device = document.getElementById("AirConditionOn");
                            airConditionOn = new Switch(device, {
                                size: 'large',
                                showText: true,
                                checked: checked,
                                onText: 'On',
                                offText: 'Off',
                                onChange: function () { updateSetting(airConditionOn.getChecked(),''); }
                             });
                        }
                        if (temp_range.length < 1) {
                             $("#temp_range").ionRangeSlider({
                               skin: "round",
                                grid: true,
                                min: 0,
                                max: 100,
                                from: parseInt(deviceState.DeviceControlTemperture),
                                max_postfix: "+",
                                prefix: " ",
                                postfix: " C",
                                onFinish: function (data) { updateSetting(airConditionOn.getChecked(), data.from); }
                 
                            });

                            temp_range= $("#temp_range").data("ionRangeSlider");
                        }

                       
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Temperature', 'Humidity'],
                            labels: ['Temperature', 'Humidity']
                        });
                        $("#BoardReadingTableBody").html("");
                        var htmlInfo = "";
                        var lengthT = deviceState.Events.length;
                        if (lengthT > 5)
                            lengthT = 5;
                        for (var i = 0; i < lengthT; i++) {
                            var event = deviceState.Events[i];
                            htmlInfo+=' <tr>'+
                                            '<td>Temperature</td>' +
                                            '<td>' + event.Temperature + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                '</tr>' +
                                ' <tr>'+
                                            '<td>Humidity</td>' +
                                            '<td>' + event.Humidity + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                        '</tr>'
                        }
                        $("#BoardReadingTableBody").html(htmlInfo);

                         break;

                    }
                    if (deviceState.DeviceType == "Light") {
                         $("#AirConditionSettings").css('display', 'none');
                         $("#LightSettings").css('display', 'block');

                        if (lightOn.length < 1) {
                            var checked = false;
                            if (deviceState.DeviceOn == 'on')
                                checked = true;

                            var device = document.getElementById("LightOn");
                            lightOn = new Switch(device, {
                                size: 'large',
                                showText: true,
                                checked: checked,
                                onText: 'On',
                                offText: 'Off',
                                onChange: function () { updateSetting(lightOn.getChecked(),''); }
                             });
                        }
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['DeviceOn'],
                            labels: ['DeviceOn']
                        });

                        $("#BoardReadingTableBody").html("");
                        var htmlInfo = "";
                        var lengthT = deviceState.Events.length;
                        if (lengthT > 10)
                            lengthT = 10;
                        for (var i = 0; i < lengthT; i++) {
                            var event = deviceState.Events[i];
                            htmlInfo+=' <tr>'+
                                            '<td>Device On</td>' +
                                            '<td>' + event.DeviceOn + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                '</tr>'

                        }
                        $("#BoardReadingTableBody").html(htmlInfo);
                        break;
                    }
                    if (deviceState.DeviceType == "Meter") {
                       $("#DeviceSettingPage").css('display', 'none');
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Value'],
                            labels: ['Useage']
                        });

                        $("#BoardReadingTableBody").html("");
                        var htmlInfo = "";
                        var lengthT = deviceState.Events.length;
                        if (lengthT > 10)
                            lengthT = 10;
                        for (var i = 0; i < lengthT; i++) {
                            var event = deviceState.Events[i];
                            htmlInfo+=' <tr>'+
                                    '<td>Useage</td>' +
                                    '<td>' + event.Value + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                    '</tr>' 
                                
                        }
                        $("#BoardReadingTableBody").html(htmlInfo);
                        break;
                    }
                }
            }


            reLoadChart();
        }

        function reLoadChart() {

            for (var i = 0; i < deviceInfo.Devices.length; i++) {
                if (deviceInfo.DeviceState[i].DeviceName == culDevice) {
                    var deviceState = deviceInfo.DeviceState[i];
                    $("#BoardChart").html('');
                    if (deviceState.DeviceType == "AirCondition") {
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Temperature', 'Humidity'],
                            labels: ['Temperature', 'Humidity']
                        });
                        break;

                    }
                    if (deviceState.DeviceType == "Light") {
                         
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['DeviceOn'],
                            labels: ['DeviceOn']
                        });
                        break;
                    }
                    if (deviceState.DeviceType == "Meter") {
                        
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Value'],
                            labels: ['Useage']
                        });
                        break;
                    }
                    
                }
            }
        }
        function initDeviceInfo() {
            $("#DeviceCount").html(deviceInfo.DeviceCount);
            $("#ConnectedDeviceCount").html(deviceInfo.DeviceConectedCount);
            var msgCount = 0;
            var deviceFirst = "";
            for (var i = 0; i < deviceInfo.Devices.length; i++) {
                msgCount += deviceInfo.Devices[i].message_count;
                deviceFirst = deviceInfo.Devices[0].iot_id;
            }

            $("#MessageReceivedCount").html(msgCount);
            if (culDevice.length < 1)
                initDevice(deviceFirst);
            else
                initDevice(culDevice);
            reLoadChart();
        }

        function getEvents() {
             tempDevice = culDevice;
             $.ajax({
                type: "POST",
                contentType: "application/json;charset=utf-8",
                url: '@Url.Action("GetEvents","IoT")',

                dataType: 'json',
                success: function (data) {
                     var result = JSON.parse(data.result);
                     if (result.success) {
                         deviceInfo = JSON.parse(result.info);
                         culDevice = tempDevice;
                         initDeviceInfo();
                     }


                }
            })
        }

         function updateSetting(deviceOn,temperature) {
             tempDevice = culDevice;
            
             var deviceStatue = '';
             if (deviceOn == true)
                 deviceStatue ='on'
             if (deviceOn == false)
                 deviceStatue = 'off';

             var data = '{"DeviceID":"' + culDevice
                 + '","DeviceOn":"' + deviceStatue
                 + '","Temperature":"' + temperature
                 + '"}' 

          
            $.ajax({
                type: "POST",
                contentType: "application/json;charset=utf-8",
                url: '@Url.Action("SendMessage","IoT")',
                data: '{"DeviceID":"' + culDevice
                 + '","DeviceOn":"' + deviceStatue
                 + '","Temperature":"' + temperature
                 + '"}',
                
                success: function (res) {
                     var result = JSON.parse(res.result);
                    if (result.success) {
                       
                    }

                }
            })
        }

     

    </script>


}
<div class="block-header">
    <h2>Devices</h2>
</div>

<!-- Widgets -->
<div class="row clearfix">
    <div>
        <label style="color:red;font-size:x-large" id="message"></label>
    </div>
    <div>
        <table id="gridDevices"></table>
    </div>

</div>





<div class="modal right  fade" id="ModalRight" style="margin-right:0px" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="ModalTitle"></h4>
            </div>
            <div class="modal-body">
                <div>
                    <div class="body">
                        <div id="BoardTitle" class="font-24 header" style="padding:10px;">Device "Door and Movement"</div>
                        <ul class="nav nav-tabs tab-nav-right" role="tablist">
                            <li role="presentation" class=""><a href="#board" data-toggle="tab" aria-expanded="true">Board</a></li>
                            <li role="presentation" class="active"><a href="#chart" onclick="setTimeout('reLoadChart()',500);" data-toggle="tab" aria-expanded="false">Chart</a></li>
                            <li role="presentation" class=""><a href="#readings" data-toggle="tab" aria-expanded="false">Readings</a></li>
                            <li role="presentation" id="DeviceSettingPage" class=""><a href="#deviceSettings" data-toggle="tab" aria-expanded="false">Settings</a></li>

                        </ul>
                        <div class="tab-content">
                            <div role="tabpanel" class="tab-pane fade" id="board">

                            </div>
                            <div role="tabpanel" class="tab-pane fade active in" id="chart">
                                <b>Chart</b>
                                <div id="BoardChart"></div>

                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="readings">

                                <table class="table table-hover table-striped">
                                    <caption>Readings</caption>
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Value</th>
                                            <th>Time</th>
                                        </tr>
                                    </thead>
                                    <tbody id="BoardReadingTableBody">
                                    </tbody>
                                </table>
                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="deviceSettings">
                                <b>Settings</b>
                                <div id="AirConditionSettings">
                                    <div>
                                        <input type="checkbox"   id="AirConditionOn" />
                                    </div>
                                    <div>
                                        <input type="text" class="js-range-slider" id="temp_range" name="temp_range" value="" />
                                    </div>
                                </div>
                                <div id="LightSettings">
                                    <div>
                                        <input type="checkbox"   id="LightOn" />
                                    </div>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal -->
</div>