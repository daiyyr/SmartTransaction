#pragma checksum "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "73cb60593b0e6d92e9e19724776bcf619952c5e1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_IoT_Devices), @"mvc.1.0.view", @"/Views/IoT/Devices.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/IoT/Devices.cshtml", typeof(AspNetCore.Views_IoT_Devices))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\_ViewImports.cshtml"
using Abp.Localization;

#line default
#line hidden
#line 1 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml"
using AzureIoTPortal.Web.Startup;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"73cb60593b0e6d92e9e19724776bcf619952c5e1", @"/Views/IoT/Devices.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ce343e6a069753839c90283688a3deb27c70db97", @"/Views/_ViewImports.cshtml")]
    public class Views_IoT_Devices : AzureIoTPortal.Web.Views.AzureIoTPortalRazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", "~/lib/morris.js/morris.css", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/igniteui/css/themes/infragistics/infragistics.theme.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/igniteui/css/structure/infragistics.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/morris.js/morris.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/dist/switch.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/igniteui/js/infragistics.core.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/igniteui/js/infragistics.lob.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/morris.js/morris.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/dist/switch.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml"
  
    ViewBag.CurrentPageName = PageNames.Home; // The menu item will be active for this page.

#line default
#line hidden
            DefineSection("styles", async() => {
                BeginContext(153, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(159, 85, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "73cb60593b0e6d92e9e19724776bcf619952c5e17484", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.Href = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
#line 6 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion = true;

#line default
#line hidden
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-append-version", __Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper.AppendVersion, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(244, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(250, 94, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "73cb60593b0e6d92e9e19724776bcf619952c5e19675", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(344, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(350, 78, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "73cb60593b0e6d92e9e19724776bcf619952c5e111007", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(428, 111, true);
                WriteLiteral("\r\n    <link rel=\"stylesheet\" href=\"http://cdnjs.cloudflare.com/ajax/libs/prettify/r224/prettify.min.css\">\r\n    ");
                EndContext();
                BeginContext(539, 59, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "73cb60593b0e6d92e9e19724776bcf619952c5e112453", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(598, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(604, 54, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "73cb60593b0e6d92e9e19724776bcf619952c5e113786", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(658, 2035, true);
                WriteLiteral(@"
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.0/css/ion.rangeSlider.min.css"" />

    <style type=""text/css"">



        .modal.left .modal-dialog,
        .modal.right .modal-dialog {
            position: fixed;
            margin: auto;
            width: 560px;
            height: 100%;
            -webkit-transform: translate3d(0%, 0, 0);
            -ms-transform: translate3d(0%, 0, 0);
            -o-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
        }

        .modal.left .modal-content,
        .modal.right .modal-content {
            height: 100%;
            overflow-y: auto;
        }

        .modal.left .modal-body,
        .modal.right .modal-body {
            padding: 15px 15px 80px;
        }

        /*Left*/
        .modal.left.fade .modal-dialog {
            left: -560px;
            -webkit-transition: opacity 0.3s linear, left 0.3s ease-out;
            -moz-transition:");
                WriteLiteral(@" opacity 0.3s linear, left 0.3s ease-out;
            -o-transition: opacity 0.3s linear, left 0.3s ease-out;
            transition: opacity 0.3s linear, left 0.3s ease-out;
        }

        .modal.left.fade.in .modal-dialog {
            left: 0;
        }

        /*Right*/
        .modal.right.fade .modal-dialog {
            right: -560px;
            -webkit-transition: opacity 0.3s linear, right 0.3s ease-out;
            -moz-transition: opacity 0.3s linear, right 0.3s ease-out;
            -o-transition: opacity 0.3s linear, right 0.3s ease-out;
            transition: opacity 0.3s linear, right 0.3s ease-out;
        }

        .modal.right.fade.in .modal-dialog {
            right: 0;
        }

        /* ----- MODAL STYLE ----- */
        .modal-content {
            border-radius: 0;
            border: none;
        }

        .modal-header {
            border-bottom-color: #EEEEEE;
            background-color: #FAFAFA;
        }
    </style>

");
                EndContext();
            }
            );
            DefineSection("scripts", async() => {
                BeginContext(2715, 148, true);
                WriteLiteral("\r\n\r\n    <script src=\"http://code.jquery.com/ui/1.11.1/jquery-ui.min.js\"></script>\r\n\r\n    <!-- Ignite UI Required Combined JavaScript Files -->\r\n    ");
                EndContext();
                BeginContext(2863, 62, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "73cb60593b0e6d92e9e19724776bcf619952c5e117549", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2925, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(2931, 61, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "73cb60593b0e6d92e9e19724776bcf619952c5e118805", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2992, 104, true);
                WriteLiteral("\r\n    <script src=\"http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.2/raphael-min.js\"></script>\r\n\r\n    ");
                EndContext();
                BeginContext(3096, 49, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "73cb60593b0e6d92e9e19724776bcf619952c5e120167", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3145, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(3151, 44, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "73cb60593b0e6d92e9e19724776bcf619952c5e121423", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3195, 511, true);
                WriteLiteral(@"
    <script src=""http://cdnjs.cloudflare.com/ajax/libs/prettify/r224/prettify.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.0/js/ion.rangeSlider.min.js""></script>

    <script type=""text/javascript"">
         var deviceInfo = """";
        var culDevice = """";
        var tempDevice = """";
        var airConditionOn='',lightOn='';
        var temp_range='';
        var culDeviceOn = false;
         
        $(function () {
             deviceInfo = ");
                EndContext();
                BeginContext(3708, 25, false);
#line 104 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml"
                      Write(Html.Raw(ViewBag.Devices));

#line default
#line hidden
                EndContext();
                BeginContext(3734, 17056, true);
                WriteLiteral(@";
           
          
            
             $(""#gridDevices"").igGrid({

                width: ""100%"",
                 autoCommit: true,
                 dataSource: deviceInfo.Devices,
                dataSourceType: ""json"",
                responseDataKey: ""results"",

                autofitLastColumn: false,
                autoGenerateColumns: false,
                 primaryKey: ""iot_id"",

                columns: [
                    { key: ""Id"", headerText: ""ID"", dataType: ""number"", width: ""0%"", hidden: true },
                    { key: ""iot_id"", headerText: ""Device"", dataType: ""string"" },
                    { key: ""connection_state"", headerText: ""Connection"", dataType: ""string""  },
                    { key: ""last_conection_state_update_time"", headerText: ""Last Connection Update Time"", dataType: ""date"", format: ""dd/MM/yyyy HH:mm:ss"" },
                    { key: ""last_activity_time"", headerText: ""Last Activity Time"", dataType: ""date"", format: ""dd/MM/yyyy HH:mm:ss""} ,
  ");
                WriteLiteral(@"                  { key: ""state"", headerText: ""State"", dataType: ""string""},
                    { key: ""CreationTime"",  headerText: ""Add Time"", dataType: ""date"", format: ""dd/MM/yyyy HH:mm:ss"" }

                 ],

                features: [
                    {
                        name: 'Paging',
                        type: ""local"",
                        pageSize: 20
                    }
                ],

                autoGenerateLayouts: false,

                 cellClick: function (evt, ui) {
                     culDevice = ui.rowKey;
                     initDevice(ui.rowKey);
                     $(""#ModalRight"").modal('show');
                     setTimeout('reLoadChart()',500);
                 }
             });

            //var ref = setInterval(function(){
            //    getEvents();
            //}, 10 * 1000);


           
        })

        function initDevice(device) {


            culDevice = device;
            var boardTitle = devi");
                WriteLiteral(@"ce;
            $(""#ModalTitle"").html(boardTitle);

            $(""#BoardTitle"").html('Device ""' + device + '""');
            for (var i = 0; i < deviceInfo.Devices.length; i++) {
                if (deviceInfo.DeviceState[i].DeviceName == device) {
                    var deviceState = deviceInfo.DeviceState[i];

                    var boardInfo = '';

                    if (deviceState.Connection.length > 0) {
                         boardInfo +=   '<div class=""col-sm-6 col-md-4"">'+
                            '<div class=""thumbnail"" style=""text-align:center"">'+
                                '<i class=""material-icons"">devices</i>'+
                                '<div class=""caption"">'+
                                    '<h3>'+deviceState.Connection+'</h3>'+
                                    '<div class=""font-16"">'+
                                        'Status'+
                                    '</div>'+
                                    '<div class=""font-10 col-grey"">'+");
                WriteLiteral(@"
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }

                    if (deviceState.Temperature.length > 0) {
                         boardInfo +=   '<div class=""col-sm-6 col-md-4"">'+
                            '<div class=""thumbnail"" style=""text-align:center"">'+
                                '<i class=""material-icons"">devices</i>'+
                                '<div class=""caption"">'+
                                    '<h3>'+deviceState.Temperature+'</h3>'+
                                    '<div class=""font-16"">'+
                                        'Temperature'+
                                    '</div>'+
                                    '<div class=""font-10 col-grey"">'+
                                        deviceState.StateTime+
                                    '</");
                WriteLiteral(@"div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }

                    if (deviceState.Humidity.length > 0) {
                         boardInfo +=   '<div class=""col-sm-6 col-md-4"">'+
                            '<div class=""thumbnail"" style=""text-align:center"">'+
                                '<i class=""material-icons"">devices</i>'+
                                '<div class=""caption"">'+
                                    '<h3>'+deviceState.Humidity+'</h3>'+
                                    '<div class=""font-16"">'+
                                        'Humidity'+
                                    '</div>'+
                                    '<div class=""font-10 col-grey"">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        ");
                WriteLiteral(@"'</div>';
                    }
                    if (deviceState.DeviceOn.length > 0) {
                         boardInfo +=   '<div class=""col-sm-6 col-md-4"">'+
                            '<div class=""thumbnail"" style=""text-align:center"">'+
                                '<i class=""material-icons"">devices</i>'+
                                '<div class=""caption"">'+
                                    '<h3>'+deviceState.DeviceOn+'</h3>'+
                                    '<div class=""font-16"">'+
                                        'Device'+
                                    '</div>'+
                                    '<div class=""font-10 col-grey"">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }
                    if (deviceState.Value.length > 0) {
                         bo");
                WriteLiteral(@"ardInfo +=   '<div class=""col-sm-6 col-md-4"">'+
                            '<div class=""thumbnail"" style=""text-align:center"">'+
                                '<i class=""material-icons"">devices</i>'+
                             '<div class=""caption"">' +
                                '<h3>' + deviceState.Value + '</h3>' +
                                    '<div class=""font-16"">'+
                                        'Useage'+
                                    '</div>'+
                                    '<div class=""font-10 col-grey"">'+
                                        deviceState.StateTime+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>';
                    }
                    

                    $(""#board"").html(boardInfo);
                    $('#BoardChart').html('');
                    $('#DeviceOnCheckBox').html('');
                    $(""#DeviceSet");
                WriteLiteral(@"tingPage"").css('display', 'block');
                    if (deviceState.DeviceType == ""AirCondition"") {
                        $(""#AirConditionSettings"").css('display', 'block');
                         $(""#LightSettings"").css('display', 'none');

                        if (airConditionOn.length < 1) {
                            var checked = false;
                            if (deviceState.DeviceOn == 'on')
                                checked = true;

                            var device = document.getElementById(""AirConditionOn"");
                            airConditionOn = new Switch(device, {
                                size: 'large',
                                showText: true,
                                checked: checked,
                                onText: 'On',
                                offText: 'Off',
                                onChange: function () { updateSetting(airConditionOn.getChecked(),''); }
                             });
           ");
                WriteLiteral(@"             }
                        if (temp_range.length < 1) {
                             $(""#temp_range"").ionRangeSlider({
                               skin: ""round"",
                                grid: true,
                                min: 0,
                                max: 100,
                                from: parseInt(deviceState.DeviceControlTemperture),
                                max_postfix: ""+"",
                                prefix: "" "",
                                postfix: "" C"",
                                onFinish: function (data) { updateSetting(airConditionOn.getChecked(), data.from); }
                 
                            });

                            temp_range= $(""#temp_range"").data(""ionRangeSlider"");
                        }

                       
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data:");
                WriteLiteral(@" deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Temperature', 'Humidity'],
                            labels: ['Temperature', 'Humidity']
                        });
                        $(""#BoardReadingTableBody"").html("""");
                        var htmlInfo = """";
                        var lengthT = deviceState.Events.length;
                        if (lengthT > 5)
                            lengthT = 5;
                        for (var i = 0; i < lengthT; i++) {
                            var event = deviceState.Events[i];
                            htmlInfo+=' <tr>'+
                                            '<td>Temperature</td>' +
                                            '<td>' + event.Temperature + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                '</tr>' +
                                ' <tr>'+
                                            '<td>Humid");
                WriteLiteral(@"ity</td>' +
                                            '<td>' + event.Humidity + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                        '</tr>'
                        }
                        $(""#BoardReadingTableBody"").html(htmlInfo);

                         break;

                    }
                    if (deviceState.DeviceType == ""Light"") {
                         $(""#AirConditionSettings"").css('display', 'none');
                         $(""#LightSettings"").css('display', 'block');

                        if (lightOn.length < 1) {
                            var checked = false;
                            if (deviceState.DeviceOn == 'on')
                                checked = true;

                            var device = document.getElementById(""LightOn"");
                            lightOn = new Switch(device, {
                                size: 'large',
                                sho");
                WriteLiteral(@"wText: true,
                                checked: checked,
                                onText: 'On',
                                offText: 'Off',
                                onChange: function () { updateSetting(lightOn.getChecked(),''); }
                             });
                        }
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['DeviceOn'],
                            labels: ['DeviceOn']
                        });

                        $(""#BoardReadingTableBody"").html("""");
                        var htmlInfo = """";
                        var lengthT = deviceState.Events.length;
                        if (lengthT > 10)
                            lengthT = 10;
                        for (var i = 0; i < lengthT; i++) {
            ");
                WriteLiteral(@"                var event = deviceState.Events[i];
                            htmlInfo+=' <tr>'+
                                            '<td>Device On</td>' +
                                            '<td>' + event.DeviceOn + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                '</tr>'

                        }
                        $(""#BoardReadingTableBody"").html(htmlInfo);
                        break;
                    }
                    if (deviceState.DeviceType == ""Meter"") {
                       $(""#DeviceSettingPage"").css('display', 'none');
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Value'],
                            labels: ['Useage']
                        });

    ");
                WriteLiteral(@"                    $(""#BoardReadingTableBody"").html("""");
                        var htmlInfo = """";
                        var lengthT = deviceState.Events.length;
                        if (lengthT > 10)
                            lengthT = 10;
                        for (var i = 0; i < lengthT; i++) {
                            var event = deviceState.Events[i];
                            htmlInfo+=' <tr>'+
                                    '<td>Useage</td>' +
                                    '<td>' + event.Value + '</td>' +
                                            '<td>' + event.Time + '</td>' +
                                    '</tr>' 
                                
                        }
                        $(""#BoardReadingTableBody"").html(htmlInfo);
                        break;
                    }
                }
            }


            reLoadChart();
        }

        function reLoadChart() {

            for (var i = 0; i < deviceInfo.Dev");
                WriteLiteral(@"ices.length; i++) {
                if (deviceInfo.DeviceState[i].DeviceName == culDevice) {
                    var deviceState = deviceInfo.DeviceState[i];
                    $(""#BoardChart"").html('');
                    if (deviceState.DeviceType == ""AirCondition"") {
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Temperature', 'Humidity'],
                            labels: ['Temperature', 'Humidity']
                        });
                        break;

                    }
                    if (deviceState.DeviceType == ""Light"") {
                         
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
    ");
                WriteLiteral(@"                        xkey: 'Time',
                            ykeys: ['DeviceOn'],
                            labels: ['DeviceOn']
                        });
                        break;
                    }
                    if (deviceState.DeviceType == ""Meter"") {
                        
                        Morris.Area({
                            element: 'BoardChart',
                            behaveLikeLine: true,
                            data: deviceState.Events,
                            xkey: 'Time',
                            ykeys: ['Value'],
                            labels: ['Useage']
                        });
                        break;
                    }
                    
                }
            }
        }
        function initDeviceInfo() {
            $(""#DeviceCount"").html(deviceInfo.DeviceCount);
            $(""#ConnectedDeviceCount"").html(deviceInfo.DeviceConectedCount);
            var msgCount = 0;
            var devi");
                WriteLiteral(@"ceFirst = """";
            for (var i = 0; i < deviceInfo.Devices.length; i++) {
                msgCount += deviceInfo.Devices[i].message_count;
                deviceFirst = deviceInfo.Devices[0].iot_id;
            }

            $(""#MessageReceivedCount"").html(msgCount);
            if (culDevice.length < 1)
                initDevice(deviceFirst);
            else
                initDevice(culDevice);
            reLoadChart();
        }

        function getEvents() {
             tempDevice = culDevice;
             $.ajax({
                type: ""POST"",
                contentType: ""application/json;charset=utf-8"",
                url: '");
                EndContext();
                BeginContext(20791, 29, false);
#line 476 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml"
                 Write(Url.Action("GetEvents","IoT"));

#line default
#line hidden
                EndContext();
                BeginContext(20820, 1059, true);
                WriteLiteral(@"',

                dataType: 'json',
                success: function (data) {
                     var result = JSON.parse(data.result);
                     if (result.success) {
                         deviceInfo = JSON.parse(result.info);
                         culDevice = tempDevice;
                         initDeviceInfo();
                     }


                }
            })
        }

         function updateSetting(deviceOn,temperature) {
             tempDevice = culDevice;
            
             var deviceStatue = '';
             if (deviceOn == true)
                 deviceStatue ='on'
             if (deviceOn == false)
                 deviceStatue = 'off';

             var data = '{""DeviceID"":""' + culDevice
                 + '"",""DeviceOn"":""' + deviceStatue
                 + '"",""Temperature"":""' + temperature
                 + '""}' 

          
            $.ajax({
                type: ""POST"",
                contentType: ""application/json;char");
                WriteLiteral("set=utf-8\",\r\n                url: \'");
                EndContext();
                BeginContext(21880, 31, false);
#line 510 "C:\Users\Teemo\Documents\Visual Studio 2015\Projects\abpIotPortal\aspnet-core\src\AzureIoTPortal.Web.Mvc\Views\IoT\Devices.cshtml"
                 Write(Url.Action("SendMessage","IoT"));

#line default
#line hidden
                EndContext();
                BeginContext(21911, 476, true);
                WriteLiteral(@"',
                data: '{""DeviceID"":""' + culDevice
                 + '"",""DeviceOn"":""' + deviceStatue
                 + '"",""Temperature"":""' + temperature
                 + '""}',
                
                success: function (res) {
                     var result = JSON.parse(res.result);
                    if (result.success) {
                       
                    }

                }
            })
        }

     

    </script>


");
                EndContext();
            }
            );
            BeginContext(22390, 4131, true);
            WriteLiteral(@"<div class=""block-header"">
    <h2>Devices</h2>
</div>

<!-- Widgets -->
<div class=""row clearfix"">
    <div>
        <label style=""color:red;font-size:x-large"" id=""message""></label>
    </div>
    <div>
        <table id=""gridDevices""></table>
    </div>

</div>





<div class=""modal right  fade"" id=""ModalRight"" style=""margin-right:0px"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">&times;</button>
                <h4 class=""modal-title"" id=""ModalTitle""></h4>
            </div>
            <div class=""modal-body"">
                <div>
                    <div class=""body"">
                        <div id=""BoardTitle"" class=""font-24 header"" style=""padding:10px;"">Device ""Door and Movement""</div>
                        <ul class=""nav nav-tabs tab-nav-r");
            WriteLiteral(@"ight"" role=""tablist"">
                            <li role=""presentation"" class=""""><a href=""#board"" data-toggle=""tab"" aria-expanded=""true"">Board</a></li>
                            <li role=""presentation"" class=""active""><a href=""#chart"" onclick=""setTimeout('reLoadChart()',500);"" data-toggle=""tab"" aria-expanded=""false"">Chart</a></li>
                            <li role=""presentation"" class=""""><a href=""#readings"" data-toggle=""tab"" aria-expanded=""false"">Readings</a></li>
                            <li role=""presentation"" id=""DeviceSettingPage"" class=""""><a href=""#deviceSettings"" data-toggle=""tab"" aria-expanded=""false"">Settings</a></li>

                        </ul>
                        <div class=""tab-content"">
                            <div role=""tabpanel"" class=""tab-pane fade"" id=""board"">

                            </div>
                            <div role=""tabpanel"" class=""tab-pane fade active in"" id=""chart"">
                                <b>Chart</b>
                              ");
            WriteLiteral(@"  <div id=""BoardChart""></div>

                            </div>
                            <div role=""tabpanel"" class=""tab-pane fade"" id=""readings"">

                                <table class=""table table-hover table-striped"">
                                    <caption>Readings</caption>
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Value</th>
                                            <th>Time</th>
                                        </tr>
                                    </thead>
                                    <tbody id=""BoardReadingTableBody"">
                                    </tbody>
                                </table>
                            </div>
                            <div role=""tabpanel"" class=""tab-pane fade"" id=""deviceSettings"">
                                <b>Settings</b>
                    ");
            WriteLiteral(@"            <div id=""AirConditionSettings"">
                                    <div>
                                        <input type=""checkbox""   id=""AirConditionOn"" />
                                    </div>
                                    <div>
                                        <input type=""text"" class=""js-range-slider"" id=""temp_range"" name=""temp_range"" value="""" />
                                    </div>
                                </div>
                                <div id=""LightSettings"">
                                    <div>
                                        <input type=""checkbox""   id=""LightOn"" />
                                    </div>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">

            </div>
        </div><!-- /.modal-content -->");
            WriteLiteral("\n    </div><!-- /.modal -->\r\n</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
